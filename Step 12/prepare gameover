#!/usr/bin/env python3

# Created by: Roman Cernetchi
# Created on: January 2021
# This is a program "Ocean rescue" game on Pybadge

import ugame
import stage
import time
import math
import random
import constants


def splash_scene():
    # This function is the splash scene
    
    # switch with wave sound once done
    wave_sound = open("WaveCrashingAtBeach.wav", 'rb')
    sound = ugame.audio
    sound.stop()
    sound.mute(False)
    sound.play(wave_sound)

    image_bank_mt_background = stage.Bank.from_bmp16("mt_game_studio.bmp")

    background = stage.Grid(image_bank_mt_background, constants.SCREEN_X,
                            constants.SCREEN_Y)

        # used this program to split the image into tile: 
    #   https://ezgif.com/sprite-cutter/ezgif-5-818cdbcc3f66.png
    background.tile(2, 2, 0)  # blank white
    background.tile(3, 2, 1)
    background.tile(4, 2, 2)
    background.tile(5, 2, 3)
    background.tile(6, 2, 4)
    background.tile(7, 2, 0)  # blank white

    background.tile(2, 3, 0)  # blank white
    background.tile(3, 3, 5)
    background.tile(4, 3, 6)
    background.tile(5, 3, 7)
    background.tile(6, 3, 8)
    background.tile(7, 3, 0)  # blank white

    background.tile(2, 4, 0)  # blank white
    background.tile(3, 4, 9)
    background.tile(4, 4, 10)
    background.tile(5, 4, 11)
    background.tile(6, 4, 12)
    background.tile(7, 4, 0)  # blank white

    background.tile(2, 5, 0)  # blank white
    background.tile(3, 5, 0)
    background.tile(4, 5, 13)
    background.tile(5, 5, 14)
    background.tile(6, 5, 0)
    background.tile(7, 5, 0)  # blank white

    game = stage.Stage(ugame.display, constants.FPS)
    game.layers = [background]
    game.render_block()

    while True:
        # get user input
        time.sleep(2.0)
        menu_scene()

        # Start button pressed
        if keys & ugame.K_START != 0:
            menu_scene()

        # update game logic
        game.tick()

def menu_scene():
    # This function is the menu
    image_bank_mt_background = stage.Bank.from_bmp16("mt_game_studio.bmp")

    # Text boxes
    text = []
    text1 = stage.Text(width=29, height=12, font=None, palette=constants.BLUE_PALETTE, buffer=None)
    text1.move(20, 10)
    text1.text("MT Game Studios")
    text.append(text1)

    text2 = stage.Text(width=29, height=12, font=None, palette=constants.BLUE_PALETTE, buffer=None)
    text2.move(40, 110)
    text2.text("PRESS START")
    text.append(text2)

    background = stage.Grid(image_bank_mt_background, constants.SCREEN_X,
                            constants.SCREEN_Y)

    game = stage.Stage(ugame.display, constants.FPS)
    game.layers = text + [background]
    game.render_block()

    while True:
        # get user input
        keys = ugame.buttons.get_pressed()

        # Start button pressed
        if keys & ugame.K_START != 0:
            game_scene()

        # update game logic
        game.tick()

def game_scene():
    # this function shows sprites on Pybadge

    coin_sound = open("coin.wav", 'rb')
    sound = ugame.audio
    sound.stop()
    sound.mute(False)
    # take the coin sound for score

    score = 0

    score_text = stage.Text(width=29, height=14)
    score_text.clear()
    score_text.cursor(0,0)
    score_text.move(1,1)
    score_text.text("Score: {0}".format(score))

    def show_rock():
        # this function places an alien on the screen
        for rock_number in range(len(rocks)):
            if rocks[rock_number].x < 0:
                rocks[rock_number].move(random.randint(0 + constants.SPRITE_SIZE,
                                        constants.SCREEN_X - constants.SPRITE_SIZE),
                                        constants.OFF_TOP_SCREEN)
                break

    def show_survivor():
        # this function places an alien on the screen
        for survivor_number in range(len(survivor)):
            if survivor[survivor_number].x < 0:
                survivor[survivor_number].move(random.randint(0 + constants.SPRITE_SIZE,
                                               constants.SCREEN_X - constants.SPRITE_SIZE),
                                               constants.OFF_TOP_SCREEN)
                break

    image_bank_background = stage.Bank.from_bmp16("background.bmp")
    image_bank_sprites = stage.Bank.from_bmp16("background.bmp")

    a_button = constants.button_state["button_up"]
    b_button = constants.button_state["button_up"]
    start_button = constants.button_state["button_up"]
    select_button = constants.button_state["button_up"]
    
    background = stage.Grid(image_bank_background, constants.SCREEN_X,
                            constants.SCREEN_Y)
    for x_location in range(constants.SCREEN_GRID_X):
        for y_location in range(constants.SCREEN_GRID_Y):
            tile_picked = random.randint(0, 2)
            background.tile(x_location, y_location, tile_picked)
    
    boat = stage.Sprite(image_bank_sprites, 3, 75, constants.SCREEN_Y - (2 * constants.SPRITE_SIZE))

    rocks = []
    for rock_number in range(constants.TOTAL_NUMBER_OF_ROCKS):
        a_single_rock = stage.Sprite(image_bank_sprites, 4,
                                     constants.OFF_SCREEN_X,
                                     constants.OFF_SCREEN_Y)
        rocks.append(a_single_rock)
    # place 2 rocks on the screen
    show_rock()
    show_rock()

    survivor = []
    for survivor_number in range(constants.TOTAL_NUMBER_OF_SURVIVORS):
        a_single_person = stage.Sprite(image_bank_sprites, 5,
                                       constants.OFF_SCREEN_X,
                                       constants.OFF_SCREEN_Y)
        survivor.append(a_single_person)
    # place 2 rocks on the screen
    show_survivor()

    game = stage.Stage(ugame.display, constants.FPS)
    game.layers = [score_text] + survivor + [boat] + rocks + [background]
    game.render_block()

    while True:
        # get user input
        keys = ugame.buttons.get_pressed()
        
        if keys & ugame.K_X != 0:
            pass
        if keys & ugame.K_O != 0:
            pass
        if keys & ugame.K_START != 0:
            pass
        if keys & ugame.K_SELECT != 0:
            pass

        if keys & ugame.K_RIGHT != 0:
            if boat.x <= (constants.SCREEN_X - constants.SPRITE_SIZE):
                boat.move((boat.x + constants.SPRITE_MOVEMENT_SPEED), boat.y)
            else:
                boat.move(constants.SCREEN_X - constants.SPRITE_SIZE, boat.y)

        if keys & ugame.K_LEFT != 0:
            if boat.x >= 0:
                boat.move((boat.x - constants.SPRITE_MOVEMENT_SPEED), boat.y)
            else:
                boat.move(0, boat.y)

        if keys & ugame.K_UP != 0:
            pass
        if keys & ugame.K_DOWN != 0:
            pass

        # update game logic
        for rock_number in range(len(rocks)):
            if rocks[rock_number].x > 0:
                rocks[rock_number].move(rocks[rock_number].x,
                                        rocks[rock_number].y +
                                          constants.ROCK_SPEED)
                if rocks[rock_number].y > constants.SCREEN_Y:
                    rocks[rock_number].move(constants.OFF_SCREEN_X,
                                            constants.OFF_SCREEN_Y)
                    show_rock()

        # when survivors hits bottom -1 score
        for survivor_number in range(len(survivor)):
            if survivor[survivor_number].x > 0:
                survivor[survivor_number].move(survivor[survivor_number].x,
                                               survivor[survivor_number].y +
                                               constants.PERSON_SPEED)
                if survivor[survivor_number].y > constants.SCREEN_Y:
                    survivor[survivor_number].move(constants.OFF_SCREEN_X,
                                                   constants.OFF_SCREEN_Y)
                    show_survivor()
                    score -= 1
                    if score < 0:
                        score = 0
                    score_text.clear()
                    score_text.cursor(0,0)
                    score_text.move(1,1)
                    score_text.text("Score: {0}".format(score))

                    game.layers = [score_text] + survivor + [boat] + rocks + [background]
                    game.render_block()

        # +1 when boat touches survivor
        for survivor_number in range(len(survivor)):
            if survivor[survivor_number].x > 0:
                if stage.collide(survivor[survivor_number].x + 6, survivor[survivor_number].y + 2,
                                 survivor[survivor_number].x + 11, survivor[survivor_number].y + 12,
                                 boat.x + 1, boat.y,
                                 boat.x + 15, boat.y + 15):
                    # survivor hit the boat
                    survivor[survivor_number].move(constants.OFF_SCREEN_X,
                                                   constants.OFF_SCREEN_Y)
                    sound.stop()
                    sound.play(coin_sound)
                    show_survivor()
                    score = score + 1
                    score_text.clear()
                    score_text.cursor(0,0)
                    score_text.move(1,1)
                    score_text.text("Score: {0}".format(score))

                    game.layers = [score_text] + survivor + [boat] + rocks + [background]
                    game.render_block()

        # redraw Sprites
        game.render_sprites(survivor + [boat] + rocks)
        game.tick()

def game_over_scene(final_score):
    # this function is the game over scene

    # turn off sound from last scene
    sound = ugame.audio
    sound.stop()

    # image banks for CPython
    image_bank_2 = stage.Bank.from_bmp16("mt_game_studio.bmp")

    # sets the background to image 0 in the image Bank
    background = stage.Grid(image_bank_2, constants.SCREEN_GRID_X,
                            constants.SCREEN_GRID_Y)

    # Text boxes
    text = []
    text1 = stage.Text(width=29, height=14, font=None, palette=constants.BLUE_PALETTE, buffer=None)
    text1.move(22, 20)
    text1.text("Final Score: {:0>2d}".format(final_score))
    text.append(text1)

    text2 = stage.Text(width=29, height=14, font=None, palette=constants.BLUE_PALETTE, buffer=None)
    text2.move(43, 60)
    text2.text("GAME OVER")
    text.append(text2)

    text3 = stage.Text(width=29, height=14, font=None, palette=constants.BLUE_PALETTE, buffer=None)
    text3.move(32, 110)
    text3.text("PRESS SELECT")
    text.append(text3)

    game = stage.Stage(ugame.display, constants.FPS)
    game.layers = text + [background]
    game.render_block()

    while True:
        # get user input
        keys = ugame.buttons.get_pressed()

        # Start button pressed
        if keys & ugame.K_START != 0:
            supervisor.reload()

        # update game logic
        game.tick()


if __name__ == "__main__":
    splash_scene()
